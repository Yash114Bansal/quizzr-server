// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
  GameSessions  GameSession[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  thumbnail    String?
  questions    Question[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  gameSessions GameSession[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Question {
  id        String   @id @default(cuid())
  title     String
  options   Option[]
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  createdAt DateTime @default(now())
}

model Option {
  id         String   @id @default(cuid())
  title      String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  createdAt  DateTime @default(now())
}

model Player {
  id        String      @id @default(cuid())
  name      String
  game      GameSession @relation(fields: [gameId], references: [id])
  gameId    String
  createdAt DateTime    @default(now())
}

model GameSession {
  id             String   @id @default(cuid())
  quiz           Quiz     @relation(fields: [quizId], references: [id])
  cuurentQuetion Int      @default(0)
  quizId         String
  players        Player[]
  creator        User     @relation(fields: [creatorId], references: [id])
  creatorId      String
}
