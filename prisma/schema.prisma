generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  GameSessions  GameSession[]
  quizzes       Quiz[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Quiz {
  id           String        @id @default(cuid())
  title        String
  description  String?
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  thumbnail    String?
  gameSessions GameSession[]
  questions    Question[]
  user         User          @relation(fields: [userId], references: [id])
}

model Question {
  id        String   @id @default(cuid())
  title     String
  quizId    String
  createdAt DateTime @default(now())
  timeOut   Int      @default(15)
  options   Option[]
  quiz      Quiz     @relation(fields: [quizId], references: [id])
}

model Option {
  id         String   @id @default(cuid())
  title      String
  isCorrect  Boolean
  questionId String
  createdAt  DateTime @default(now())
  question   Question @relation(fields: [questionId], references: [id])
}

model Player {
  id         String       @id @default(cuid())
  name       String
  gameId     String?
  createdAt  DateTime     @default(now())
  profilePic String?
  game       GameSession? @relation(fields: [gameId], references: [id])
}

model GameSession {
  id              String     @id @default(cuid())
  quizId          String
  creatorId       String
  gameCode        String     @unique
  gameState       GameStates @default(question)
  isPlaying       Boolean    @default(false)
  currentQuestion Int        @default(0)
  creator         User       @relation(fields: [creatorId], references: [id])
  quiz            Quiz       @relation(fields: [quizId], references: [id])
  players         Player[]
}

enum GameStates {
  question
  answer
  leaderboard
}
